{-# LANGUAGE OverloadedStrings #-}
module GenPrecomputed where

import Prelude hiding (sum)

import Data.List.Split (chunksOf)
import Numeric (showHex)
import Prettyprinter ( Doc, (<+>), encloseSep, flatAlt, fillSep, group, line, nest, pretty, vsep
                     , SimpleDocStream, LayoutOptions(..), PageWidth(..), defaultLayoutOptions, layoutPretty
                     , lbrace, rbrace, semi
                     )
import Prettyprinter.Render.Text (renderIO)
import System.IO (IOMode(WriteMode), withFile)

import Simplicity.Digest
import Simplicity.MerkleRoot
import Simplicity.Programs.Generic
import Simplicity.Tags
import Simplicity.Ty
import Simplicity.Ty.Word

class Enumerable a where
  allValues :: [a]

instance Enumerable () where
  allValues = [()]

instance (Enumerable a, Enumerable b) => Enumerable (Either a b) where
  allValues = (Left <$> allValues) ++ (Right <$> allValues)

instance (Enumerable a, Enumerable b) => Enumerable (a, b) where
  allValues = pair <$> allValues <*> allValues
   where
    pair x y = (x, y)

single = (:[])
bracket = group . encloseSep (flatAlt "{ " "{") (flatAlt " }" "}") ", "

prettyCHash :: Hash256 -> Doc a
prettyCHash h = bracket (format <$> chunksOf 8 str_h)
 where
  format x = "0x" <> pretty x <> "u"
  str_h = padding ++ text
   where
    padding = replicate (64 - length text) '0'
    text = showHex (integerHash256 h) ""

declareWord1CMR :: Doc a
declareWord1CMR = vsep
                [ "/* This array contains the cmr of all canonical expressions of type X |- 2 that output distinct values. */"
                ] <> line <> nest 2 (vsep
                [ "static const sha256_midstate bit_cmr[] ="
                , bracket [bracket . single . prettyCHash . commitmentRoot $ (scribe x :: CommitmentRoot () Word1) | x <- allValues] <> semi
                ])

allWordRoots :: [Hash256]
allWordRoots = typeRoot one : iterate diag bit
 where
  bit = typeRoot (sum one one)
  diag x = ivHash $ compress (typeTag "prod") (x,x)

declareWordTypeRoots :: Doc a
declareWordTypeRoots = vsep
                [ "/* word_type_root[0] contains the type root of the ONE type."
                , " * word_type_root[1] contains the type root of the TWO type."
                , " * word_type_root[2] contains the type root of the TWO^2 type."
                , " * word_type_root[3] contains the type root of the TWO^4 type."
                , " * ..."
                , " * word_type_root[32] contains the type root of the TWO^(2^31) type."
                , " */"
                ] <> line <> nest 2 (vsep
                [ "static const sha256_midstate word_type_root[] ="
                , bracket [bracket . single . prettyCHash $ x | x <- take 33 allWordRoots] <> semi
                ])

header = vsep $
  [ "/* This file has been automaticaly generated by GenPecomputed.hs */"
  , "#ifndef SIMPLICITY_PRECOMPUTED_H"
  , "#define SIMPLICITY_PRECOMPUTED_H"
  , ""
  , "#include \"sha256.h\""
  ]

footer = vsep $
  [ "#endif"
  ]

precomputed_h :: SimpleDocStream a
precomputed_h = layoutPretty layoutOptions $ vsep (map (<> line)
  [ header
  , declareWord1CMR
  , declareWordTypeRoots
  , footer
  ])
 where
  layoutOptions = LayoutOptions { layoutPageWidth = AvailablePerLine 132 1 }

renderFile name doc = withFile name WriteMode (\h -> renderIO h doc)

main = do
  renderFile "precomputed.h" precomputed_h
