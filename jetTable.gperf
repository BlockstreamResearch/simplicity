%{
#include "jetTable.h"

#include "sha256/compression.h"
#include "jets.h"

/* Give the generated 'jetTable' function static scope. */
static const struct jetEntry * jetTable (register const char *str, register size_t len);
%}
%includes
/* %compare-lengths is required when keys contain \x00 characters. Merkle roots could contain such characters. */
%compare-lengths
%readonly-tables
%define lookup-function-name jetTable
%define slot-name witnessMerkleRoot
%struct-type
struct jetEntry { const char* witnessMerkleRoot; jet_ptr jet; JET_FLAG flag;};
%%
"\x8e\x38\x9a\x7d\x75\x42\x9a\x8a\x6f\x5b\x44\x8e\xc8\xe8\x45\x85\x20\xe2\x76\xfc\x8e\x09\xef\x5a\x68\xf3\xf3\x2d\x9f\xb9\x79\x35", &adder32         , JET_WORD
"\xb9\x14\xe4\xb5\x9f\x8e\xde\xd4\xcd\x03\x6e\x03\xff\xa5\xf1\x1a\xa8\x66\x8a\xe4\x98\x63\xbb\xb4\x3a\x0d\x7c\x3a\x14\xc9\x16\xf0", &fullAdder32     , JET_WORD
"\x75\xeb\xd5\x69\xbf\xce\x7a\xf8\x03\x0c\x49\xc7\x3e\x10\x4c\x03\x65\xde\x89\x8e\xa8\xd5\x26\x70\xbf\xfe\x9f\x6e\x31\x2f\xf6\xe6", &subtractor32    , JET_WORD
"\x7a\x52\xe8\x3e\x25\x3a\xe7\x76\xb0\xb9\x48\xf1\x50\x83\x52\x8e\x1c\x5d\x58\xcd\x5e\x03\xd4\xf2\xf0\x4a\x96\x26\xe0\x47\x6a\xeb", &fullSubtractor32, JET_WORD
"\x40\x59\x14\xc9\x52\x4c\x48\x73\xce\x5d\xdb\x06\xfd\x30\xd6\xd5\xfc\x4a\xc1\xfa\xc0\xee\xf8\xd8\x2d\xe6\xc6\x22\x7f\xb2\xd2\xcd", &multiplier32    , JET_WORD
"\x89\xa0\xae\x09\x8a\xff\x5e\x9c\x40\x90\x74\x47\x91\xff\x5c\x8e\xe1\x7a\x8c\xeb\x9e\x49\x42\x24\xe9\x19\xde\xb1\x1c\x5b\x8a\xf4", &fullMultiplier32, JET_WORD
"\xee\xae\x47\xe2\xf7\x87\x6c\x3b\x9c\xbc\xd4\x04\xa3\x38\xb0\x89\xfd\xea\xdf\x1b\x9b\xb3\x82\xec\x6e\x69\x71\x9d\x31\xba\xec\x9a", &sha256_hashBlock, JET_HASH
%%
/* Given a witness Merkle root for some Simplicity expression, find a jet that simulates it.
 * If such a jet is found, and that jet's type matches the 'filter' then the jet is returned.
 * Otherwise 'NULL' is returned.
 *
 * Precondition: wmr != NULL.
 */
jet_ptr lookupJet(const sha256_midstate *wmr, JET_FLAG filter) {
  unsigned char str[32];
  sha256_fromMidstate(str, wmr->s);

  const struct jetEntry* entry = jetTable(str, 32);
  return entry && (entry->flag && filter) ? entry->jet : NULL;
}
